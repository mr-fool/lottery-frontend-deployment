{"version":3,"sources":["logo.svg","web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getWeb3","Web3","window","web3","currentProvider","Promise","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","resolve","reject","_web3","provider","wrap","_context","prev","next","ethereum","enable","console","log","providers","HttpProvider","t0","Error","message","stop","_x","_x2","apply","this","arguments","src_lottery","abi","constant","inputs","name","outputs","type","payable","stateMutability","address","App","state","manager","lottery","players","balance","value","onSubmit","event","accounts","preventDefault","eth","Contract","contractData","getAccounts","sent","_this","setState","methods","enter","send","from","utils","toWei","onClick","_callee2","_context2","pickWinner","call","getPlayers","getBalance","options","_this2","react_default","createElement","length","fromWei","onChange","target","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1176f420.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import Web3 from \"web3\";\r\nconst web3 = new Web3(window.web3.currentProvider);\r\nlet getWeb3 = new Promise(async function(resolve, reject) {\r\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n  var results;\r\n  let _web3;\r\n  try {\r\n    if (window.ethereum) {\r\n      _web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    }\r\n    // Checking if Web3 has been injected by the browser (Mist/MetaMask)\r\n    else if (typeof window.web3 !== \"undefined\") {\r\n      // Use Mist/MetaMask's provider.\r\n      _web3 = new Web3(window.web3.currentProvider);\r\n\r\n      console.log(\"Injected web3 detected.\");\r\n    } else {\r\n      // Fallback to localhost if no web3 injection. We've configured this to\r\n      // use the development console's port by default.\r\n      var provider = new Web3.providers.HttpProvider(\r\n        \"https://rinkeby.infura.io/v3/727c635298344b37961bb1755114f08b\"\r\n      );\r\n\r\n      _web3 = new Web3(provider);\r\n      console.log(\"No web3 instance injected, using Infuria web3.\");\r\n    }\r\n    results = {\r\n      web3: _web3\r\n    };\r\n    resolve(results);\r\n  } catch (e) {\r\n    throw new Error(e.message || e);\r\n  }\r\n});\r\n\r\nexport default getWeb3;\r\n","const address = \"0x8895B2ed3EF4F4f66d048A3F215aC0DeA9Eb6777\";\r\n\r\nconst abi = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"manager\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"address\"\r\n      }\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\"\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [],\r\n    name: \"pickWinner\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\"\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"getPlayers\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"address[]\"\r\n      }\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\"\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [],\r\n    name: \"enter\",\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: \"payable\",\r\n    type: \"function\"\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\"\r\n      }\r\n    ],\r\n    name: \"players\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"address\"\r\n      }\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\"\r\n  },\r\n  {\r\n    inputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\"\r\n  }\r\n];\r\n/*\r\n const fetchERC20 = async instance => {\r\n          let object = {};\r\n          try {\r\n            let name = await instance.name.call();\r\n            let sym = await instance.symbol.call();\r\n            let totalSupply = await instance.totalSupply.call();\r\n            object.name = name;\r\n            object.sym = sym;\r\n            object.totalSupply = totalSupply.toNumber();\r\n          } catch (err) {\r\n            console.log(err);\r\n            return false;\r\n          }\r\n          return object;\r\n        };\r\n\r\n        export default fetchERC20;\r\n*/\r\nexport default {\r\n  abi,\r\n  address\r\n};\r\n","import React, { Component } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport getWeb3 from \"./web3\";\r\nimport contractData from \"./lottery\";\r\nimport Web3 from \"web3\";\r\nconst web3 = new Web3(window.web3.currentProvider);\r\nclass App extends Component {\r\n  state = {\r\n    manager: \"\",\r\n     web3: {}, \r\n     lottery: {},\r\n     players: [],\r\n     balance: '',\r\n     value: '',\r\n     message: ''\r\n  };\r\n  async componentDidMount() {\r\n    console.log(contractData);\r\n    const { web3 } = await getWeb3;\r\n    const lottery = new web3.eth.Contract(\r\n      contractData.abi,\r\n      contractData.address\r\n    );\r\n\r\n    const manager = await lottery.methods.manager().call();\r\n    const players = await lottery.methods.getPlayers().call();\r\n    const balance = await web3.eth.getBalance(lottery.options.address);\r\n    this.setState({ manager, web3, lottery,players, balance });\r\n  }\r\n \r\n  onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const lottery = new web3.eth.Contract(\r\n      contractData.abi,\r\n      contractData.address\r\n    );\r\n    const accounts = await web3.eth.getAccounts();\r\n\r\n    this.setState({message: 'Waiting on transaction success...'});\r\n\r\n    await lottery.methods.enter().send({\r\n      from: accounts[0],\r\n      value: web3.utils.toWei(this.state.value, 'ether')\r\n    });\r\n    this.setState({message: \"You have been entered! \"});\r\n  }\r\n  onClick = async() => {\r\n    const lottery = new web3.eth.Contract(\r\n      contractData.abi,\r\n      contractData.address\r\n    );\r\n    const accounts = await web3.eth.getAccounts();\r\n    this.setState({message: 'Waiting on transaction success...'});\r\n    await lottery.methods.pickWinner().send({\r\n      from: accounts[0]\r\n    });\r\n    this.setState({message: 'A winner has been picked!'});\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Lottery Contract</h2>\r\n        <p>\r\n          This contract is managed by {this.state.manager}.\r\n          There are currently {this.state.players.length} people entered,\r\n          competiting to win { web3.utils.fromWei(this.state.balance, 'ether') } ether! \r\n          </p>\r\n      <hr/>\r\n      <form onSubmit={this.onSubmit}>\r\n        <h4>Want to try your luck?</h4>\r\n        <div>\r\n          <label>Amount of ether to enter</label>\r\n          <input \r\n            value={this.state.value}\r\n            onChange={event => this.setState({value: event.target.value})}\r\n          />\r\n        </div>\r\n        <button>Enter</button>\r\n      </form>\r\n      <hr/>\r\n      <h4>Ready to pick a winner?</h4>\r\n      <button onClick={this.onClick}>Pick a winner!</button>\r\n      <hr />\r\n      <h1>{this.state.message}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}